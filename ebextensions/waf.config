Resources:
  WafAcl:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      Name: '`{ "Ref" : "AWSEBEnvironmentName" }`'
      Description: 'Web ACL to block malicious requests'
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: WafAclMetric
      Rules:
        - Name: AwsCommonRule
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AwsCommonRuleMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              RuleActionOverrides:
                # normal for /v3/participants/self
                - Name: SizeRestrictions_BODY
                  ActionToUse:
                    Allow: {}
                # needs more investigation
                - Name: GenericRFI_BODY
                  ActionToUse:
                    Count: {}
                - Name: GenericRFI_QUERYARGUMENTS
                  ActionToUse:
                    Count: {}
                - Name: GenericRFI_URIPATH
                  ActionToUse:
                    Count: {}
        - Name: AwsKnownBadRule
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AwsKnownBadRuleMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
        - Name: CustomBadSuffix
          Priority: 0
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CustomBadSuffixMetric
          Statement:
            # Block requests for paths storting or ending in '.env'
            # Block requests for paths ending in '.aspx', '.php', 'phpinfo', or '.rb'
            # https://repost.aws/questions/QUGvcw-5sOQc2Q6RROgLb8DQ/how-do-i-selectively-override-waf-rules-for-only-specific-uris-in-cloudformation
            RegexMatchStatement:
              FieldToMatch:
                UriPath: {}
              RegexString: '^/*(\.env.*|.*(\.(env|aspx|php|rb)|phpinfo))$'
              TextTransformations:
                - Priority: 0
                  Type: NONE
        - Name: ErrorFalsePositive
          Priority: 0
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: ErrorFalsePositiveMetric
          Statement:
            # Block bot scan requests for paths that are incorrectly identified as errors
            # https://repost.aws/questions/QUGvcw-5sOQc2Q6RROgLb8DQ/how-do-i-selectively-override-waf-rules-for-only-specific-uris-in-cloudformation
            RegexMatchStatement:
              FieldToMatch:
                UriPath: {}
              RegexString: '.*(errors?_log|errorCss).*$
              TextTransformations:
                - Priority: 0
                  Type: NONE

# Attach the Web ACL to the Load Balancer created by Beanstalk
# https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-resources.html
# https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-format-resources-eb.html
  WafAclAssociation:
    Type: 'AWS::WAFv2::WebACLAssociation'
    Properties:
      ResourceArn: '`{ "Ref" : "AWSEBV2LoadBalancer" }`'
      WebAclArn: '`{ "Fn::GetAtt" : ["WafAcl", "Arn" ]}`'
